services:
    kafka:
        image: apache/kafka:3.9.0
        container_name: kafka
        ports:
            - "19092:19092"
            - "9093:9093"
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: "broker,controller"
            KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
            KAFKA_LISTENERS: "PLAINTEXT://:9092,EXTERNAL://:19092,CONTROLLER://:9093"
            KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:19092"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
            KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
            KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
            KAFKA_LOG_DIRS: "/var/lib/kafka/data"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 16
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        volumes:
            - kafka_data:/var/lib/kafka/data
        healthcheck:
            test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:19092 --list" ]
            interval: 10s
            timeout: 10s
            retries: 10
            start_period: 40s
        networks:
            - pricing-network

    kafka-init:
        image: apache/kafka:3.9.0
        container_name: kafka-init
        depends_on:
            kafka:
                condition: service_healthy
        entrypoint: ["/bin/sh"]
        command:
            - -c
            - |
                echo "Creating Kafka topics..."
                sleep 5
                /opt/kafka/bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --topic ride-requests --partitions 16 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=3600000 || echo "Topic ride-requests might already exist"
                /opt/kafka/bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --topic driver-heartbeats --partitions 16 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=3600000 || echo "Topic driver-heartbeats might already exist"
                /opt/kafka/bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --topic price-updates --partitions 16 --replication-factor 1 --config cleanup.policy=delete --config retention.ms=86400000 || echo "Topic price-updates might already exist"
                echo "Topics created!"
                /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
        networks:
            - pricing-network
        restart: "no"

    postgres:
        image: postgres:16
        container_name: postgres
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: pricing
            POSTGRES_USER: pricing
            POSTGRES_PASSWORD: pricing123
            POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
            POSTGRES_HOST_AUTH_METHOD: trust
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U pricing -d pricing" ]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - pricing-network

    event-generator:
        build:
            context: ..
            dockerfile: services/event-generator/Dockerfile
        container_name: event-generator
        ports:
            - "8082:8082"
        environment:
            SPRING_PROFILES_ACTIVE: local
            BOOTSTRAP_SERVERS: kafka:9092
        depends_on:
            kafka:
                condition: service_healthy
            kafka-init:
                condition: service_completed_successfully
        networks:
            - pricing-network
        restart: unless-stopped

    pricing-api:
        build:
            context: ..
            dockerfile: services/pricing-api/Dockerfile
        container_name: pricing-api
        ports:
            - "8081:8081"
        environment:
            SPRING_PROFILES_ACTIVE: local
            BOOTSTRAP_SERVERS: kafka:9092
            DATABASE_HOST: postgres
            DATABASE_PORT: 5432
            DATABASE_NAME: pricing
            DATABASE_USER: pricing
            DATABASE_PASSWORD: pricing123
        depends_on:
            postgres:
                condition: service_healthy
            kafka:
                condition: service_healthy
            kafka-init:
                condition: service_completed_successfully
        networks:
            - pricing-network
        restart: unless-stopped

    flink-job:
        build:
            context: ..
            dockerfile: flink-pricing-job/Dockerfile
        container_name: flink-job
        environment:
            KAFKA_BROKERS: kafka:9092
        depends_on:
            kafka:
                condition: service_healthy
            kafka-init:
                condition: service_completed_successfully
            event-generator:
                condition: service_started
        networks:
            - pricing-network
        restart: unless-stopped

    frontend:
        build:
            context: ..
            dockerfile: frontend/Dockerfile
        container_name: frontend
        ports:
            - "3000:3000"
        depends_on:
            - pricing-api
        networks:
            - pricing-network
        restart: unless-stopped

volumes:
    kafka_data:
        driver: local
    postgres_data:
        driver: local

networks:
    pricing-network:
        name: pricing-network
        driver: bridge
