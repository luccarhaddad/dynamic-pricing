services:
    kafka:
        image: apache/kafka:3.9.0
        container_name: kafka
        ports:
            - "19092:19092"
            - "9093:9093"
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: "broker,controller"
            KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
            # Two listeners: PLAINTEXT (internal Docker), EXTERNAL (host machine)
            KAFKA_LISTENERS: "PLAINTEXT://:9092,EXTERNAL://:19092,CONTROLLER://:9093"
            KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:19092"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
            KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
            KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
            KAFKA_LOG_DIRS: "/var/lib/kafka/data"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 16
            # Auto-create topics (useful for development)
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        volumes:
            - kafka_data:/var/lib/kafka/data
        healthcheck:
            test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:19092 --list" ]
            interval: 10s
            timeout: 10s
            retries: 10
            start_period: 40s

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafka-ui
        ports:
            - "8080:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: "local"
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
            DYNAMIC_CONFIG_ENABLED: "true"
        depends_on:
            kafka:
                condition: service_healthy

    postgres:
        image: postgres:16
        container_name: postgres
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: pricing
            POSTGRES_USER: pricing
            POSTGRES_PASSWORD: pricing123
            POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
            POSTGRES_HOST_AUTH_METHOD: trust
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U pricing -d pricing" ]
            interval: 30s
            timeout: 10s
            retries: 5

volumes:
    kafka_data:
        driver: local
    postgres_data:
        driver: local

networks:
    default:
        name: pricing-network
